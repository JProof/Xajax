<?php
/**
 * PHP version php7
 *
 * @category
 * @package            xajax-php-7
 * @author             ${JProof}
 * @copyright          ${copyright}
 * @license            ${license}
 * @link
 * @see                ${docu}
 * @since              14.10.2017
 */

declare(strict_types=1);

namespace Xajax\Plugins\Callableobject;

use Xajax\RequestIface;
use Xajax\Response\Manager;

/**
 * Class Handler
 *
 * @package Xajax\Plugins\Userfunction
 */
class Handler
{
	/*
			Object: obj

			A reference to the callable object.
		*/
	private $obj;
	/*
		Array: aConfiguration

		An associative array that will contain configuration options for zero
		or more of the objects methods.  These configuration options will
		define the call options for each request.  The call options will be
		passed to the client browser when the function stubs are generated.
	*/
	private $aConfiguration;

	/*
		Function: xajaxCallableObject

		Constructs and initializes the <xajaxCallableObject>

		obj - (object):  The object to reference.
	*/
	public function __construct($obj)
	{
		$this->obj            = $obj;
		$this->aConfiguration = [];
	}

	/*
		Function: getName

		Returns the name of this callable object.  This is typically the
		class name of the object.
	*/
	public function getName(): string
	{
		return \get_class($this->obj);
	}

	/**
	 * Listing Methods in Class
	 *
	 * @todo  check against public methods!
	 * @return array
	 */
	public function getMethods(): array
	{
		$aReturn = [];
		foreach (get_class_methods($this->obj) as $sMethodName)
		{
			$aReturn[] = $sMethodName;
		}

		return $aReturn;
	}

	/*
		Function: configure

		Used to set configuration options / call options for each method.

		sMethod - (string):  The name of the method.
		sName - (string):  The name of the configuration option.
		sValue - (string):  The value to be set.
	*/
	public function configure($sMethod, $sName, $sValue)
	{
		$sMethod = strtolower($sMethod);

		if (false == isset($this->aConfiguration[$sMethod]))
		{
			$this->aConfiguration[$sMethod] = [];
		}

		$this->aConfiguration[$sMethod][$sName] = $sValue;
	}

	/*
		Function: generateRequests

		Produces an array of <xajaxRequest> objects, one for each method
		exposed by this callable object.

		sXajaxPrefix - (string):  The prefix to be prepended to the
			javascript function names; this will correspond to the name
			used for the function stubs that are generated by the
			<xajaxCallableObject->generateClientScript> call.
	*/
	public function generateRequests($sXajaxPrefix): ?RequestIface
	{
		$returnRequest = null;

		$sClass = $this->getMethods();

		foreach (get_class_methods($this->obj) as $sMethodName)
		{
			$bInclude = true;
			// exclude magic __call, __construct, __destruct methods
			if (2 < \strlen($sMethodName))
			{
				if ('__' === substr($sMethodName, 0, 2))
				{
					$bInclude = false;
				}
			}
			// exclude constructor
			if ($sClass === $sMethodName)
			{
				$bInclude = false;
			}
			if ($bInclude)
			{
				$returnRequest                             = new Request("{$sXajaxPrefix}{$sClass}.{$sMethodName}");
				$this->aRequests[strtolower($sMethodName)] = $returnRequest;
			}
		}

		return $returnRequest;
	}

	/*
		Function: generateClientScript

		Called by <xajaxCallableObject->generateClientScript> while <xajax> is
		generating the javascript to be sent to the browser.

		sXajaxPrefix - (string):  The prefix to be prepended to the
			javascript function names.
	*/
	public function generateClientScript($sXajaxPrefix)
	{
		$sClass = $this->getName();

		// inits the js namespace
		echo "{$sXajaxPrefix}{$sClass} = {};\n";

		foreach (get_class_methods($this->obj) as $sMethodName)
		{
			$bInclude = true;
			// exclude magic __call, __construct, __destruct methods
			if (2 < strlen($sMethodName))
			{
				if ("__" === substr($sMethodName, 0, 2))
				{
					$bInclude = false;
				}
			}
			// exclude constructor
			if ($sClass === $sMethodName)
			{
				$bInclude = false;
			}
			if ($bInclude)
			{
				echo "{$sXajaxPrefix}{$sClass}.{$sMethodName} = function() { ";
				echo 'return xajax.request( ';
				echo "{ xjxcls: '{$sClass}', xjxmthd: '{$sMethodName}' }, ";
				echo '{ parameters: arguments';

				$sSeparator = ', ';
				if (isset($this->aConfiguration['*']))
				{
					foreach ($this->aConfiguration['*'] as $sKey => $sValue)
					{
						echo "{$sSeparator}{$sKey}: {$sValue}";
					}
				}
				if (isset($this->aConfiguration[strtolower($sMethodName)]))
				{
					foreach ($this->aConfiguration[strtolower($sMethodName)] as $sKey => $sValue)
					{
						echo "{$sSeparator}{$sKey}: {$sValue}";
					}
				}

				echo ' } ); ';
				echo "};\n";
			}
		}
	}

	/*
		Function: isClass

		Determins if the specified class name matches the class name of the
		object referenced by <xajaxCallableObject->obj>.

		sClass - (string):  The name of the class to check.

		Returns:

		boolean - True of the specified class name matches the class of
			the object being referenced; false otherwise.
	*/
	public function isClass(?string $sClass = null): bool
	{
		return null !== $sClass && \get_class($this->obj) === $sClass;
	}

	/*
		Function: hasMethod

		Determines if the specified method name is one of the methods of the
		object referenced by <xajaxCallableObject->obj>.

		sMethod - (object):  The name of the method to check.

		Returns:

		boolean - True of the referenced object contains the specified method,
			false otherwise.
	*/
	public function hasMethod($sMethod): bool
	{
		return method_exists($this->obj, $sMethod) || method_exists($this->obj, '__call');
	}

	/*
		Function: call

		Call the specified method of the object being referenced using the specified
		array of arguments.

		sMethod - (string): The name of the method to call.
		aArgs - (array):  The arguments to pass to the method.
	*/
	public function call(string $sMethod, ?array $aArgs = null): void
	{
		$aArgs = (array) $aArgs;

		$objResponseManager = Manager::getInstance();
		$objResponseManager->append(
		    \call_user_func_array(
			[$this->obj, $sMethod],
			$aArgs
		    )
		);
	}
}